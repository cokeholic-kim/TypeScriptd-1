타입스크립트

2012년에 발표됨 대규모 javascript 애플리케이션 개발용도
마이크로소프트 개발. 오픈소스 프로그래밍 언어 
자바스크립트의 상위집합(자바스크립트의 모든 기능을 포함하고있음.)
자바스크립트에 포함되지 않는 새로운 기능 
정적인 언어..

*자바스크립트와 가장 큰 차이 !
자바스크립트는 동적인 언어이며 프로그램 구동중에 타입이 다이나믹하게 변경되지만
타입스크립트는 정적인 언어이며 프로그램을 작성할때. 타입을 정의해준다.


타입스크립트의 장점
1.버그를 줄이고 유지보수하기 쉬우며 질좋은 코드 작성에 용이함
2.강력한 타입으로 대규모 개발에 용이함.
3.자바스크립트 라이브러리와 편리한사용
4.개발도구에서의 강력한 지원.

프론트엔드 프레임워크와 타입스크립트.
리액트(React)
	리액트와 타입스크립트 호환성은 좋은편
	- 간단한 옵션 추가만으로 타입스크립트를 사용할수 있도록 지원
뷰(Vue)
	뷰2.0부터 타입스크립트 사용가능
	뷰3.0부터 타입스크립트 공식 지원
앵귤러(Angular)
	버전 2부터 타입스크립트를 기반으로 만들어졌고
	타입스크립트를 권장하고 있음.

타입스크립트 사용하기. 
Typescript 파일은 웹 브라우져가 해석 할 수 없음
typescript ----> javascript 로 변환
트랜스파일러로 변환 작업을 함

노드에서 설치
npm install typescript
https://www.typescriptlang.org/


tsc typescript.ts //명령어로 변환.
tsc test.ts --target es6 //es6 구문으로 변환.
tsc [파일명][옵션 --target es6]

모듈 시스템 정의
tsc 파일명 --target es6 --module commonjs

컴파일러 설정파일 만들기
src --> ts파일  
1.tsconfig.json 파일 생성
include : 변환될 파일 지정
compilerOptions:타입스크립트 컴파일러에 대한 옵션설정.
옵션
"outDir": "./",   // 자바스크립트 파일 위치.
"rootDir": "./",  // 타입스크립트 파일 위치.
"target": "es2016", //자바스크립트 구문 지정

tsc --init 타입스크립트 초기화
tsconfig.json 생성됨.

tsc [파일이름] [옵션]
tsc

1)타입 추론
	타입스크립트는 타입 표기가 없는 경우 코드를 읽고 분석하여 타입을 유추할수 있음
2)타입 명시
	변수선언시 변수값의 타입을 명시함으로써 변수값의 데이터 타입을 지정
	구문) let x:string :"string" //영원히 문자열 타입의 변수

3) 타입선언
	1.변수 타입 선언
	let 변수명 type
	number , string , boolean , null , undefined
	object,Array<type>,type[ ], 항목의 값을 지정할 수 없을때 any지정
	유니언 타입(다중타입) 
	let array:(string| number)[ ]
	let strnum:(string | number) 

함수타입선언
1.인수와 반환값이 있을때
let myFunction:(arg1:number,arg2:number)=>number;
myFunction = function(x,y){
	return x+y;
}
function myFunction(a:number,b:number):number{
	return a+b
}
2.인수와 반환값이 없을때. void 키워드 --> 리턴이 없을때
function myFunction( ) : void {
	console.log("hi")
}
let myFunction:( ) => void;
myfunction = function(){
	console.log('hi')
}



2023-02-16

typeScript
let num:number = 30
num= "a"

typescript ==> javascript


    //암묵적으로 any타입을 가지는 것을 허락하지않음
	(두개를 쓰는것과 strict:true 가 똑같음)
    "noImplicitAny": true,
    "strictNullChecks": true,
    //엄격한 nulltype체크
    "strict":true,

this.바인딩 메서드
this --> window
user.print( ) // user가 this 
함수내부에에서 사용할 this를 바인딩(지정)
	function printName(){
		console.log(this.name) //윈도우.		
	}
	call( )  // call메소드는 모든 함수에서 사용할수 있으며 this를 특정한값으로 바인딩할때 사용
	        // call은 일반적인 함수와 같이 매개변수를 직접받지만 
		apply는 배열로 받는다
	apply( ) // update.call(green,1998,"teacher")
		update.apply(green,[1998,"teacher"])
bind( ) // 함수에서 사용할 this를 영구적으로 지정
const updatebella=함수.bind(대상객체)
updatebella(1980,"police")

Enum 열거형타입
숫자 혹은 문자열 값 집합에 이름을 부여할수있는 타입
값의 종류가 일정한 범위로 정해져 있는경우 유용함. 
구문 enum name {
	값1,
	값2,
	값3,
}

interface 타입스크립트의 여러 객체를 정의하는 일종의 규칙이며 구조이다.
1.객체의 타입정의
	객체타입의 interface
	interface 인터페이스 이름 {
		key:key타입;
		key?:key타입;
	}
2.함수의 타입정의
	함수타입의 interface
	interface 인터페이스이름 {
		호출 시그니쳐정의
		(parameter: parametertype):return type
	} 
3.클래스의 타입정의

클래스 
객체를 생성해주는 템플릿!!!
객체의 설계도 
데이터는 들어있지 않음
class 클래스명 {
	//생성자
	constructor(name,age){
		this.name = name;
		this.age = age;
	}
	//method
	speak(){
		console.log(`${this.name}:hello`)
	}
}

let user2 = new 클래스명


객체 
클래스를 사용해서 실제 만드는것